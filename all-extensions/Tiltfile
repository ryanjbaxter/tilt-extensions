v1alpha1.extension(name='live-reload', repo_name='tilt-extensions', repo_path='live-reload')
v1alpha1.extension(name='spring-cloud-k8s-configserver', repo_name='tilt-extensions', repo_path='spring-cloud-k8s-configserver')
v1alpha1.extension(name='spring-cloud-k8s-discoveryserver', repo_name='tilt-extensions', repo_path='spring-cloud-k8s-discoveryserver')
v1alpha1.extension(name='mysql', repo_name='tilt-extensions', repo_path='mysql')
v1alpha1.extension(name='remote-debug', repo_name='tilt-extensions', repo_path='bp-remote-debug')
v1alpha1.extension(name='volumes', repo_name='tilt-extensions', repo_path='volumes')
v1alpha1.extension(name='rabbitmq', repo_name='tilt-extensions', repo_path='rabbitmq')
jkube = load_dynamic('ext://live-reload')
configserver = load_dynamic('ext://spring-cloud-k8s-configserver')
discoveryserver = load_dynamic('ext://spring-cloud-k8s-discoveryserver')
mysql = load_dynamic('ext://mysql')
configmap = load_dynamic('ext://configmap')
remote_debug = load_dynamic('ext://remote-debug')
volumes = load_dynamic('ext://volumes')
rabbitmq = load_dynamic('ext://rabbitmq')

def configmap_create(name, namespace="", from_file=None, watch=True, from_env_file=None):
	return configmap['configmap_create'](name, namespace, from_file, watch, from_env_file)

def configmap_from_dict(name, namespace="", inputs={}):
	return configmap['configmap_from_dict'](name, namespace, inputs)

def add_service_binding(yaml_stream):
	return mysql['add_service_binding'](yaml_stream)

def create_mysql_resource(db_name):
	return mysql['create_mysql_resource'](db_name)

def modify_jkube_kubernetes_yaml_for_livereload(kube_yaml_path):
	return jkube['modify_jkube_kubernetes_yaml_for_livereload'](kube_yaml_path)

def config_server_deployment(kubernetesConfigServerYamlPath):
	return configserver['config_server_deployment'](kubernetesConfigServerYamlPath)

def discovery_server_deployment():
	return discoveryserver['discovery_server_deployment']()

def modify_jkube_kubernetes_yaml_for_remote_debug_blob(kube_yaml_blob, port=5005):
	return remote_debug['modify_jkube_kubernetes_yaml_for_remote_debug_blob'](kube_yaml_blob, port)

def modify_jkube_kubernetes_yaml_for_livereload_blob(kube_yaml_blob):
	return jkube['modify_jkube_kubernetes_yaml_for_livereload_blob'](kube_yaml_blob)

def add_configmap_volume_to_jkube_kubernetes_yaml(kube_yaml_blob, volume_name, configmap_name):
	return volumes['add_configmap_volume_to_jkube_kubernetes_yaml'](kube_yaml_blob, volume_name, configmap_name)

def add_volume_to_container_jkube_kubernetes_yaml(kube_yaml_blob, volume_name, mount_path):
	return volumes['add_volume_to_container_jkube_kubernetes_yaml'](kube_yaml_blob, volume_name, mount_path)

def create_rabbitmq_resource():
	return rabbitmq['create_rabbitmq_resource']()

def add_rabbitmq_service_binding(yaml_stream):
	return mysql['add_service_binding'](yaml_stream)
